<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Room_Contents_Telnet"
   author="Nick Gammon"
   id="a02de78ffbef7b149c6b0805"
   language="Lua"
   purpose="Shows contents of room in a miniwindow"
   date_written="2010-02-02"
   requires="4.40"
   version="1.0"
   save_state="y"
   >
<description trim="y">
<![CDATA[
Install this plugin to show what is in the current room.

The window can be dragged to a new location with the mouse.
]]>
</description>

</plugin>


<!--  Script  -->


<script>
<![CDATA[

FONT_NAME = "Dina"    -- the font we want to use
FONT_SIZE = 8
FONT_ID = "fn"  -- internal font identifier
  
require "movewindow"

guid_cache = {}
requested_cache = {}

function capitalize (x)
  return string.upper (string.sub(x, 1, 1)) .. string.lower (string.sub(x, 2))
end -- capitalize


function OnPluginInstall ()
  
  win = GetPluginID ()

  WindowCreate (win, 0, 0, 0, 0, 0, 0, 0)
                 
  -- add the font
  WindowFont (win, FONT_ID, FONT_NAME, FONT_SIZE)
  
  -- see how high it is
  font_height = WindowFontInfo (win, FONT_ID, 1)  -- height

  -- find where window was last time
  windowinfo = movewindow.install (win, 7)
   
end -- OnPluginInstall

function OnPluginEnable ()
  WindowShow (win, true)
end -- OnPluginDisable

function OnPluginDisable ()
  WindowShow (win, false)
end -- OnPluginDisable

-- hide window on removal
function OnPluginClose ()
  WindowShow (win,  false)  -- hide it
end -- OnPluginClose

function OnPluginSaveState ()
  movewindow.save_state (win)
end -- OnPluginSaveState


item_colours = {
  none = "darkslateblue",
  light = "yellow",
  scroll = "cyan",
  wand = "cyan",
  staff = "cyan",
  weapon = "black",
  _fireweapon = "black",
  _missile = "black",
  treasure = "black",
  armor = "black",
  potion = "black",
  _worn = "black",
  furniture = "black",
  trash = "black",
  _oldtrap = "black",
  container = "black",
  _note = "black",
  drinkcon = "blue",
  key = "black",
  food = "sienna",
  money = "gold",
  pen = "black",
  boat = "black",
  corpse = "gray",
  corpse_pc = "gray",
  fountain = "blue",
  pill = "cyan",
  blood = "maroon",
  bloodstain = "red",
  scraps = "black",
  pipe = "black",
  herbcon = "black",
  herb = "green",
  incense = "black",
  fire = "red",
  book = "black",
  switch = "black",
  lever = "black",
  pullchain = "black",
  button = "black",
  dial = "black",
  rune = "cyan",
  runepouch = "cyan",
  match = "black",
  trap = "black",
  map = "black",
  portal = "black",
  paper = "black",
  tinder = "black",
  lockpick = "black",
  spike = "black",
  disease = "black",
  oil = "black",
  fuel = "black",
  _empty1 = "black",
  _empty2 = "black",
  missileweapon = "black",
  projectile = "black",
  quiver = "black",
  shovel = "black",
  salve = "black",
  cook = "black",
  keyring = "black",
  odor = "black",
  chance = "black",
  mix = "black",
   }

local IAC, SB, SE = 0xFF, 0xFA, 0xF0
   
-- check if single item cached
function check_cache (guid, item, type)
  local cache = guid_cache [guid]  -- field to check on
  if cache then
    -- copy in cached stuff
    for k, v in pairs (cache) do
      item [k] = v  
    end -- for
  elseif not requested_cache [guid] then
      SendPkt (string.char (IAC, SB, 102) .. type .. " = \"" .. guid .. "\"" .. string.char (IAC, SE)) 
      Note ("Requested ", type, " cache ID: ", guid)
      requested_cache [guid] = GetInfo (232)  -- don't request twice
  end -- if 
end -- check_cache

function check_cache_table (tbl, type)

  if tbl then
    -- for an entire table (eg. objects, players, npcs) check all for cached guids
    for i, item in ipairs (tbl) do
      check_cache (item.guid, item, type)
    end -- for
  end -- if
  
end -- request_item

function mouseup_player (flags, hotspot_id)
  if bit.band (flags, 0x20) ~= 0 then
    -- SendNoEcho (string.format ("kill <%s>", hotspot_id))
  else
    SendNoEcho (string.format ("examine <%s>", hotspot_id)) 
   end -- if
end -- mouseup_player

function mouseup_npc (flags, hotspot_id)
  if bit.band (flags, 0x20) ~= 0 then
    SendNoEcho (string.format ("kill <%s>", hotspot_id))
  else
    SendNoEcho (string.format ("examine <%s>", hotspot_id)) 
   end -- if
end -- mouseup_npc

function mouseup_object (flags, hotspot_id)

  -- RH click
  if bit.band (flags, 0x20) ~= 0 then
    local item = guid_cache [hotspot_id]
    if not item then
      return
    end -- not in cache
    
    if not item.typ then
      return
    end -- don't know what it is
    
    local action = "get"
    if item.typ == "fountain" then
      SendNoEcho "drink"
      return
    elseif item.typ == "corpse" then
      action = "get all"
    elseif item.typ == "corpse_pc" then
      action = "get all"
    end -- if
    
    SendNoEcho (string.format ("%s <%s>", action, hotspot_id))
  else
    SendNoEcho (string.format ("examine <%s>", hotspot_id)) 
  end -- if
end -- mouseup_object

function OnPluginTelnetOption (option)

  local t = {}  -- incoming server variables will go into table t
  setfenv (assert (loadstring (option)), t) () -- compile and load into t
  
  -- cache incoming object information
  if t.obj_info then
    for k, v in pairs (t.obj_info) do
      local time_elapsed = GetInfo (232) - (requested_cache [k] or GetInfo (232))
      local dsc = "<expired>"
      if v then
        dsc = v.short or v.dsc or "(unknown?)"
        v._type = "object"
      end -- if
      Note (string.format ("RECEIVED object ID: %s in %.2f seconds (%s).", k, time_elapsed, dsc))
      guid_cache [k] = v or nil
      requested_cache [k] = nil
      -- tprint (v)
    end -- for
  end -- if

  -- cache incoming char information
  if t.char_info then
    for k, v in pairs (t.char_info) do
      local time_elapsed = GetInfo (232) - (requested_cache [k] or GetInfo (232))
      local dsc = "<expired>"
      if v then
        dsc = v.name or "(unknown?)"
        v._type = "char"
      end -- if
      Note (string.format ("RECEIVED char ID: %s in %.2f seconds (%s).", k, time_elapsed, dsc))
      guid_cache [k] = v or nil
      requested_cache [k] = nil
      -- tprint (v)
    end -- for
  end -- if
    
  if t.inroom then
    redisplay = nil
  else
    -- we couldn't display all last time, and we got some cache info, try again
    if redisplay and (t.obj_info or t.char_info) then
      t.inroom = redisplay
    else
      return
    end
  end
  
  local width = 0
  local lines = 1  -- have at least one line
  local dark_message = "It is too dark to see."
  local blind_message = "You are blind!"
  local nothing_message = "There is nothing here."
  local count = 0
  
  local background_colour = ColourNameToRGB "darkkhaki"
  

  check_cache_table (t.inroom.objects,  "obj_info")
  check_cache_table (t.inroom.npcs,     "char_info")
  check_cache_table (t.inroom.players,  "char_info")
      
   
  if t.inroom.dark then
    width = WindowTextWidth (win, FONT_ID, dark_message, true)
  elseif t.inroom.blind then
    width = WindowTextWidth (win, FONT_ID, blind_message, true)
  else  
    for k, v in pairs (t.inroom) do
      if type (v) == "table" then
        for i, item in ipairs (v) do
        
          if not guid_cache [item.guid] then
            redisplay = t.inroom  -- need to redisplay when cache info arrives
          end -- if
          
          if k == "players" then
            item.dsc = item.name
          elseif k == "npcs" then
            item.dsc = item.longdsc
          end -- if

          if not item.dsc then
            item.dsc = "Unknown"
            item.typ = "none"
          end -- if not known yet
                                
          -- adjust corpse descriptions
          if item.typ == "corpse" or item.typ == "corpse_pc" and item.short then
            item.dsc = capitalize (Trim (item.short))
            if item.alt <= 0 then
              item.dsc = item.dsc .. " is in the last stages of decay."
            elseif item.alt == 1 then
              item.dsc = item.dsc .. " is crawling with vermin."
            elseif item.alt == 2 then
              item.dsc = item.dsc .. " fills the air with a foul stench."
            elseif item.alt == 3 then
              item.dsc = item.dsc .. " is buzzing with flies."
            elseif item.alt == 4 then
              item.dsc = item.dsc .. " lies here."
            end -- if           
          end -- if
          
          -- extra stuff we add to description
          item._extra = ""
          
          if item.lvl then
            item._extra = string.format (" [%i]", item.lvl)
          end -- if
          if item.fight and item.target then
             local target = "<unknown>"
             if guid_cache [item.target] then
               target = guid_cache [item.target].short
               if not target or target == "" then
                 target = guid_cache [item.target].name
               end -- if
               target = target or "<whatever>"
             end -- if
             if item.target == my_guid then
               target = "YOU!"
             end -- if me
             item._extra = string.format ("%s (fighting %s)", item._extra , target)
          end -- if
          if item.me then
             item._extra = string.format ("%s <-- you", item._extra)
             my_guid = item.guid
          end -- if
          if guid_cache [item.guid] then
            width = math.max (width, 10 + WindowTextWidth (win, FONT_ID, item.dsc .. item._extra, true))
            lines = lines + 1
            count = count + 1
          end -- if
        end -- for
      end -- for each item
    end -- table
    if count == 0 then
      width = WindowTextWidth (win, FONT_ID, nothing_message, true)
    else 
      lines = lines - 1
    end -- if  
  end -- if
  
  window_width = width + 10
  window_height = font_height * lines + 10
  
  WindowCreate (win, 
                 windowinfo.window_left, 
                 windowinfo.window_top, 
                 window_width, window_height,  
                 windowinfo.window_mode,   -- top right
                 windowinfo.window_flags,
                 0) 

  -- let them move it around                 
  movewindow.add_drag_handler (win, 0, 0, 0, 0)
    
  
  -- fill entire box to clear it
  WindowRectOp (win, 2, 0, 0, 0, 0, background_colour)  -- fill entire box
   
  -- Edge around box rectangle
  WindowCircleOp (win, 3, 0, 0, 0, 0, ColourNameToRGB "darkgray", 0, 2, 0, 1)

  if t.inroom.blind then
    WindowText (win, FONT_ID, blind_message, 5, 5, 0, 0, ColourNameToRGB "darkred", true)
  elseif t.inroom.dark then
    WindowText (win, FONT_ID, dark_message, 5, 5, 0, 0, ColourNameToRGB "darkgreen", true)
  else  
    vertical = 5  -- pixel to start at

    WindowRectOp (win, 2, 0, 0, 0, vertical + #t.inroom.players * font_height, ColourNameToRGB "darkslategray")  
  
    table.sort (t.inroom.players, function (a, b) return a.dsc < b.dsc end)
    
    -- players first            
    for i, item in ipairs (t.inroom.players) do
      if guid_cache [item.guid] then
        local colour = "white"
        local width
        width = WindowText (win, FONT_ID, item.dsc .. item._extra, 5, vertical, 0, 0, ColourNameToRGB (colour), true)
        WindowAddHotspot(win, item.guid,  
                 5, vertical, 5 + width, vertical + font_height,   -- rectangle
                 "",  -- mouseover
                 "",  -- cancelmouseover
                 "",  -- mousedown
                 "",  -- cancelmousedown
                 "mouseup_player", 
                 "LH click to examine",  -- tooltip text
                 1, 0)  -- hand cursor
        vertical = vertical + font_height
      end -- if
    end -- for

    WindowRectOp (win, 2, 0, vertical, 0, vertical + #t.inroom.npcs * font_height, ColourNameToRGB "gainsboro") 

    table.sort (t.inroom.npcs, function (a, b) return a.dsc < b.dsc end)
    
    -- then NPCs
    for i, item in ipairs (t.inroom.npcs) do
      if guid_cache [item.guid] then
        item.dsc = string.gsub (item.dsc, "[\r\n]", "")
        local colour = "chocolate"
        if item.aggro then
          colour = "crimson"
        end -- if
        local dsc = item.dsc
        if item.fight then
           dsc = capitalize (guid_cache [item.guid].short) .. " is here"
        end -- if
          
        local width
        width = WindowText (win, FONT_ID, dsc .. item._extra, 5, vertical, 0, 0, ColourNameToRGB (colour), true)
        WindowAddHotspot(win, item.guid,  
                 5, vertical, 5 + width, vertical + font_height,   -- rectangle
                 "",  -- mouseover
                 "",  -- cancelmouseover
                 "",  -- mousedown
                 "",  -- cancelmousedown
                 "mouseup_npc", 
                 "LH click to examine\nRH click to attack",  -- tooltip text
                 1, 0)  -- hand cursor
        vertical = vertical + font_height
      end -- if
    end -- for

    table.sort (t.inroom.objects, function (a, b) return a.dsc < b.dsc end)
              
    -- then objects in the room
    for i, item in ipairs (t.inroom.objects) do
      if guid_cache [item.guid] then
        item.typ = item.typ or "none"
        if item.typ then
          colour = item_colours [item.typ]
        end -- if item has a type
        local width
        width = WindowText (win, FONT_ID, item.dsc .. item._extra, 5, vertical, 0, 0, ColourNameToRGB (colour), true)
        WindowAddHotspot(win, item.guid,  
                 5, vertical, 5 + width, vertical + font_height,   -- rectangle
                 "",  -- mouseover
                 "",  -- cancelmouseover
                 "",  -- mousedown
                 "",  -- cancelmousedown
                 "mouseup_object", 
                 capitalize (item.typ) .. "\tLH click to examine\nRH click to use",  -- tooltip text
                 1, 0)  -- hand cursor        
        vertical = vertical + font_height
      end -- if
    end -- for
   
    if count == 0 then
      WindowText (win, FONT_ID, nothing_message, 5, 5, 0, 0, ColourNameToRGB "darkgreen", true)
    end -- if  
    
  end -- if 
  
  -- 3D box
  WindowCircleOp (win, 3, 0, 0, 0, 0, 0x505050, 0, 3, 0, 1)   -- dark grey border (3 pixels)
  WindowCircleOp (win, 3, 1, 1, -1, -1, 0x7C7C7C, 0, 1, 0, 1)  -- lighter inner border
  WindowCircleOp (win, 3, 2, 2, -2, -2, 0, 0, 1, 0, 1)  -- black inside that
  WindowLine (win, 1, 1, window_width - 1, 1, 0xC2C2C2, 0, 1)  -- light top edge
  WindowLine (win, 1, 1, 1, window_height - 1, 0xC2C2C2, 0, 1)  -- light left edge (for 3D look)
  
  -- make sure window visible
  WindowShow (win, true)

end -- function OnPluginTelnetOption

function OnPluginConnect ()
  -- clear cache, it may be out of date after a reboot
  guid_cache = {}
  requested_cache = {}
end -- OnPluginConnect
]]>
</script>

</muclient>
