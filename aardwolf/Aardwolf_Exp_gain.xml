<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, July 11, 2008, 5:43 PM -->
<!-- MuClient version 4.33 -->

<!-- Plugin "XP_gain" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Aardwolf_Exp_gain"
   author="Nick Gammon"
   id="e34c9929c87f4f77c24d6687"
   language="Lua"
   purpose="Estimates time to level based on recent kills"
   date_written="2008-07-11 17:41:42"
   requires="4.34"
   save_state="y"
   version="2.0"
   >
<description trim="y">
<![CDATA[
xp           - show names and counts of mobs we killed
xp reset     - resets "recent kills" table, use when starting a new killing session
xp reset all - same as "xp reset" plus it removes the list of mobs killed

]]>
</description>

</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^You receive (\d+) experience points?\.$"
   regexp="y"
   script="mobdied"
   sequence="100"
  >
   </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   script="xp_alias"
   match="^xp( reset| reset all)?$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[
local MAXAVERAGE = 5 -- max to keep for averages

local xp_table = {}
local mobs = {}  -- table of mobs killed

background_colour = 0x000055
text_colour = 0xA83EFF
heading_colour = 0x800080

require "commas"


function Display_Line (line, text, id, colour)

local left = 5
local top =  (line - 1) * font_height + 2

  WindowText (win, id, text, left, top, 0, 0, colour)

end -- Display_Line

function show_xp_window ()
 
  local t = {}
  
  table.insert(t, string.format ("To level %i:", stats.level + 1))

  table.insert(t, string.format ("%s XP (%s)",
                commas (xptogo),
                convert_time (time_to_go)))

  table.insert(t, string.format ("%i avg kill%s.",
                kills,
                plural (kills)))
                
  table.insert(t, string.format ("(%s XP/hour)",
               commas (string.format ("%i", xp_per_hour))))              
               
  max_width = 0 
  for k, v in ipairs (t) do
    max_width = math.max (max_width, WindowTextWidth (win, font_id, v))
  end -- for
   
  -- recreate the window the correct size
  WindowCreate (win, 
               0, 0,   -- left, top (auto-positions)
               max_width + 10,     -- width
               #t * font_height + 5,  -- height
               7,       -- auto-position: top middle
               0,  -- flags
               background_colour) 
     
  for k, v in ipairs (t) do
    Display_Line (k, v, font_id, text_colour)
  end -- for
                                         
                
  WindowShow (win, true)

end -- show_when_quest_available


function plural (count)
  if count ~= 1 then
    return "s"
  else
    return ""
  end -- if
  
end -- function plural

function show_calcs (xptogo)

  stats = GetPluginVariableList("8a710e0783b431c06d61a54c")
  
  if not stats then return end
      
  level = tonumber (stats.level)
  xptogo = xptogo or tonumber (stats.to_level)

  local tablesize = #xp_table
   
   -- work out average
   local total = 0
   for _, v in ipairs (xp_table) do
     total = total + v.xpgain
   end -- for loop
   
   local av_xp = total / tablesize
   
   if tablesize <= 1 then
     return
   end

   local elapsed = xp_table [#xp_table].time - xp_table [1].time  -- time it took to do those kills
    
   kills = math.ceil (xptogo / av_xp) 
   time_to_go = (xptogo / av_xp) * elapsed / (tablesize  - 1)
   xp_per_hour = av_xp / elapsed * 60 * 60 * (tablesize  - 1)
   
   if xp_per_hour < 1 then
     return
   end -- if
   
   ColourNote ("magenta", "",
          string.format ("To level: %s XP (%s) %i avg kill%s. (%s XP/hour)",
                        commas (xptogo),
                        convert_time (time_to_go),
                        kills,
                        plural (kills),
                        commas (string.format ("%i", xp_per_hour))
                          ))  -- blue
          
  show_xp_window ()                          
end -- show_calcs

function mobdied (name, line, wildcards)

  stats = GetPluginVariableList("8a710e0783b431c06d61a54c")
  
  if not stats then return end
    
  level = tonumber (stats.level)
  xpgain = tonumber (wildcards [1])
  xptogo = tonumber (stats.to_level) - xpgain
  mob = stats.last_enemy
  
  if not mob then return end
  
  -- remember mob count
  
  mobs [mob] = (mobs [mob] or 0) + 1
  
  local kills = math.ceil (xptogo / xpgain)  -- how many such kills that is
  
  if xptogo <= 0 then
   return
  end -- if levelling right now!
  
  if last_kill_time then
   secs_since_last_kill = os.time () - last_kill_time   
  end -- not first kill
  
  last_kill_time = os.time ()-- remember for next time
  
                     
  -- remember details
  local thiskill = {
    mob = mob,
    xpgain = xpgain,
    time = last_kill_time,
  } -- end of thiskill table               
  
  if #xp_table >= MAXAVERAGE then
   table.remove (xp_table, 1) -- remove oldest one
  end -- of table full
  
  table.insert (xp_table, thiskill) -- new item
  show_calcs (xptogo)
 
end -- trigger: mobdied function
                 

function xp_alias (name, line, wildcards)

   msg = trim ( string.lower (wildcards [1] or ""))
   
   if msg == "reset all" then
     mobs = {}
     Note ("XP gain mob history reset.")
   end -- if reset all
   
   if msg == "reset" or msg == "reset all" then
     xp_table = {}
     last_xp_amount = nil
     Note ("XP gain calculations reset.")
     return
   end -- if reset

   Tell ("Type ")
   Hyperlink  ("xp reset", "", "", "yellow", "")
   Tell (" to reset calculations, ")
   Hyperlink  ("xp reset all", "", "", "yellow", "")
   Note (" to reset everything.")

   -- if any mobs killed, show name of mob and number killed, for each different type
   if next (mobs) then
     local t = {}
     local total = 0
     
     -- make list of mob names and number we killed
     for k, v in pairs (mobs) do
       table.insert (t, string.format ("(%s) x%i", k, v))
       total = total + v
     end -- for
     
     -- alphabetic order
     table.sort (t)
     
     ColourNote ("Teal", "", "Killed: " .. table.concat (t, ", "))
     Note (string.format ("%i mob%s killed, %i different mob type%s", 
            total, plural (total), 
            #t, plural (#t)))
   else
     Note ("No mobs killed.")
   end -- something in mobs table

    show_calcs ()
 end -- xp_alias


function OnPluginInstall ()

  win = GetPluginID ()
  font_id = "fn"
  
  font_name = "Dina"    -- the actual font

  -- make win so I can grab the font info
  WindowCreate (win, 
                 0, 0, 1, 1,  -- 1 x 1 pixel
                 1,   -- position - irrelevant
                 0,   -- flags
                 0)   -- background colour
                 
  check (WindowFont (win, font_id, font_name, 8))  -- normal
  font_height = WindowFontInfo (win, font_id, 1)  -- height

 if GetVariable ("enabled") == "false" then
    ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
    check (EnablePlugin(GetPluginID (), false))
    return
  end -- they didn't enable us last time
  
end -- OnPluginInstall

function OnPluginDisable ()
  WindowShow (win, false)
end -- OnPluginDisable

function OnPluginSaveState ()
  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
end -- function OnPluginSaveState


]]>
</script>


</muclient>
