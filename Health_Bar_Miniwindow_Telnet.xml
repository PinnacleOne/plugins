<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Health_Bar_Miniwindow_Telnet"
   author="Nick Gammon"
   id="083960a6b070bb36e8775b1e"
   language="Lua"
   purpose="Shows stats in a mini window"
   date_written="2010-02-01"
   requires="4.40"
   version="1.0"
   save_state="y"
   >
<description trim="y">
<![CDATA[
Install this plugin to show an info bar with HP, Mana, 
and Movement points shown as a bar.

The window can be dragged to a new location with the mouse.
]]>
</description>

</plugin>


<!--  Script  -->


<script>
<![CDATA[

GAP_BETWEEN_BARS = 3
 
WINDOW_WIDTH = 300   -- width of entire status window
NUMBER_OF_TICKS = 5  -- number of tick marks

require "movewindow"
require "gauge"

FONT_NAME = get_preferred_font {"Dina", "Sylfaen", "Lucida Console", "Fixedsys", "Courier" } 
FONT_SIZE = 11
FONT_ID = "fn"  -- internal font identifier
  

                
function DoGauge (sPrompt, current, max, Colour)
  local width = WindowTextWidth (win, FONT_ID, sPrompt)  -- to right-justify it
  WindowText (win, FONT_ID, sPrompt, gauge_left - width + 5, vertical, 0, 0, ColourNameToRGB "darkred")
  
  gauge (win, sPrompt, 
          current, max, 
          gauge_left + 10, vertical, WINDOW_WIDTH - gauge_left - 15, font_height,
          ColourNameToRGB (Colour or "darkgreen"), ColourNameToRGB "gray")

  vertical = vertical + font_height + GAP_BETWEEN_BARS
end --  DoGauge
                

function OnPluginInstall ()
  
  win = GetPluginID ()

  WindowCreate (win, 0, 0, 0, 0, 0, 0, 0)
                 
  -- add the font
  WindowFont (win, FONT_ID, FONT_NAME, FONT_SIZE)
  
  -- see how high it is
  font_height = WindowFontInfo (win, FONT_ID, 1)  -- height

  -- find where window was last time
  windowinfo = movewindow.install (win, 7)
  
 
end -- OnPluginInstall

function OnPluginEnable ()
  WindowShow (win, true)
end -- OnPluginDisable

function OnPluginDisable ()
  WindowShow (win, false)
end -- OnPluginDisable

-- hide window on removal
function OnPluginClose ()
  WindowShow (win,  false)  -- hide it
end -- OnPluginClose

function OnPluginSaveState ()
  movewindow.save_state (win)
end -- OnPluginSaveState

known_stats = {}

function OnPluginTelnetOption (option)

  local t = {}  -- incoming server variables will go into table t
  setfenv (assert (loadstring (option)), t) () -- compile and load into t
  
  -- remember his level 
  level = t.level or level
  -- and name
  playername = t.name or playername

  -- can't pull things out of bar table if it isn't there
  if not t.bar then
    return
  end
    
  -- find how many (eg. HP, mana, move)
  for k, v in pairs (t.bar) do
    known_stats [k] = known_stats [k] or {}
    -- save new stats in case not supplied in future
    known_stats [k].cur = v.cur or known_stats [k].cur
    known_stats [k].max = v.max or known_stats [k].max
    known_stats [k].pct = v.pct or known_stats [k].pct
    
    -- remember colour to display in
    known_stats [k].clr = v.clr or known_stats [k].clr
    
    -- display sequence (defaults to name)
    known_stats [k].seq = v.seq or known_stats [k].seq or k
  end -- for

  local labels = {}
  local gauge_count = 0
  for k, v in pairs (known_stats) do
    if (v.cur and v.max) or v.pct then
      table.insert (labels, k)
      gauge_count = gauge_count + 1
    end -- if something known
  end -- for
    
  if #labels == 0 then
    return
  end -- nothing known yet
  
  -- sort into wanted order
  table.sort (labels, function (a, b) return known_stats [a].seq < known_stats [b].seq end)
  
  window_height = (font_height * gauge_count) + (gauge_count * 2 + 1) * GAP_BETWEEN_BARS 
  if playername or level then
    window_height = window_height + font_height + GAP_BETWEEN_BARS
  end -- if another line needed
    
  WindowCreate (win, 
                 windowinfo.window_left, 
                 windowinfo.window_top, 
                 WINDOW_WIDTH, window_height,  
                 windowinfo.window_mode,   -- top right
                 windowinfo.window_flags,
                 0) 

  -- let them move it around                 
  movewindow.add_drag_handler (win, 0, 0, 0, 0)

  -- work out how far in to start the gauge
  gauge_left =  max_text_width (win, FONT_ID, labels) + 5
  
  local background_colour = ColourNameToRGB "lightgreen"
  
  if t.dead then
    background_colour = ColourNameToRGB "mistyrose"
  elseif t.combat then 
    background_colour = ColourNameToRGB "rosybrown"
  end -- if
  
  -- fill entire box to clear it
  WindowRectOp (win, 2, 0, 0, 0, 0, background_colour)  -- fill entire box
    
  -- Edge around box rectangle
  WindowCircleOp (win, 3, 0, 0, 0, 0, ColourNameToRGB "darkgray", 0, 2, 0, 1)

  vertical = 6  -- pixel to start at
  if playername or level then
  
    -- seperator line
    WindowLine (win, 0, font_height + GAP_BETWEEN_BARS, WINDOW_WIDTH, font_height + GAP_BETWEEN_BARS, 
                ColourNameToRGB "darkgray", 0, 1)

    -- show level number inside circle
    if level then
      local levelsize = WindowTextWidth (win, FONT_ID, level)
      local size = math.max (levelsize, font_height) + 4
      WindowCircleOp(win, 1, WINDOW_WIDTH - size + 1 , 1, WINDOW_WIDTH + 1, size + 1, 
                    ColourNameToRGB "#333333", 0, 2,  -- pen
                    0, 1) --  no brush
      WindowCircleOp(win, 1, WINDOW_WIDTH - size , 0, WINDOW_WIDTH, size, 
                    ColourNameToRGB "dimgray", 0, 2,  -- pen
                    ColourNameToRGB "lightgrey", 0) -- no brush
      WindowText (win, FONT_ID, level, WINDOW_WIDTH - size / 2 - levelsize / 2, 2, 0, 0, ColourNameToRGB "#444444")
    end -- of having level
    
    -- show player name
    if playername then    
      WindowText (win, FONT_ID, playername, 5, 2, 0, 0, ColourNameToRGB "#444444")
    end -- of having playername
    
    vertical = vertical + font_height + GAP_BETWEEN_BARS
  end
  
  -- stats don't really matter if you are dead
  if t.dead then
    local dead_message = "<You are dead>"
    local width = WindowTextWidth (win, FONT_ID, dead_message)
    local left = (WINDOW_WIDTH - width) / 2
    local top = (window_height - font_height) / 2
    WindowText (win, FONT_ID, dead_message, left, top, 0, 0, ColourNameToRGB "darkred")
  else
        
    -- show stats in alpha order
    for _, name in ipairs (labels) do
      stats = known_stats [name]
      
      if stats.pct then
        DoGauge (name, stats.pct, nil,       stats.clr)
      else
        DoGauge (name, stats.cur, stats.max, stats.clr)
      end -- if
    end -- for
        
  end -- if 
  
  -- make sure window visible
  WindowShow (win, true)

end -- function OnPluginTelnetOption

function OnPluginTelnetRequest (type, data)
  if type == 102 and data == "WILL" then
    return true
  end -- if
end -- function OnPluginTelnetRequest

-- on a new connection, this might be a new character, and name
-- and all stats different
function OnPluginConnect ()
  known_stats = {}
  WindowShow (win, false)
end -- OnConnect

]]>
</script>

</muclient>
