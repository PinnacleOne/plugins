<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Mapper_Telnet"
   author="Nick Gammon"
   id="6069eacf376f5e9dbfce901f"
   language="Lua"
   purpose="Draws room map"
   date_written="2010-02-24"
   requires="4.50"
   version="1.0"
   save_state="y"
   >
<description trim="y">
<![CDATA[
Automatic mapper.

The window can be dragged to a new location with the mouse.
]]>
</description>

</plugin>

<aliases>
  <alias
   match="map clear cache"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>
rooms = {}
Note "Mapper room cache cleared."
</send>
  </alias>
  
 <alias
   match="map zoom out"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>

  if last_drawn and ROOM_SIZE &gt; 4 then
    ROOM_SIZE = ROOM_SIZE - 2
    DISTANCE_TO_NEXT_ROOM = DISTANCE_TO_NEXT_ROOM - 2
    build_room_info ()
    draw_everything (last_drawn)
  end -- if
  
  </send>
  </alias>
  
<alias
   match="map zoom in"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>

  if last_drawn and ROOM_SIZE &lt; 40 then
    ROOM_SIZE = ROOM_SIZE + 2
    DISTANCE_TO_NEXT_ROOM = DISTANCE_TO_NEXT_ROOM + 2
    build_room_info ()
    draw_everything (last_drawn)
  end -- if
  
  </send>
  </alias>  
    
</aliases>


<!--  Script  -->


<script>
<![CDATA[

FONT_NAME = "Fixedsys"    -- the font we want to use
FONT_SIZE = 9
FONT_ID = "fn"  -- internal font identifier
  
-- size of map window
WINDOW_WIDTH = 300
WINDOW_HEIGHT = 400

-- size of room box
ROOM_SIZE = 10

-- how far away to draw rooms from each other
DISTANCE_TO_NEXT_ROOM = 15

-- how far from where we are standing to draw (rooms)
MAX_DEPTH = 30

-- assorted colours
BACKGROUND_COLOUR       = ColourNameToRGB "lightseagreen"
ROOM_COLOUR             = ColourNameToRGB "cyan"
EXIT_COLOUR             = ColourNameToRGB "darkgreen"
EXIT_COLOUR_UP_DOWN     = ColourNameToRGB "darkmagenta"
OUR_ROOM_COLOUR         = ColourNameToRGB "black"
SHOP_FILL_COLOUR        = ColourNameToRGB "darkolivegreen"
TRAINER_FILL_COLOUR     = ColourNameToRGB "yellowgreen"
BLACKSMITH_FILL_COLOUR  = ColourNameToRGB "darkgray"
HEALER_FILL_COLOUR      = ColourNameToRGB "gold"

require "movewindow"
require "serialize"
require "copytable"

rooms = {}
requested_rooms = {}

local IAC, SB, SE = 0xFF, 0xFA, 0xF0

-- check if single item cached
function check_room_cache (guid, item, type)
  local cache = rooms [guid]  -- field to check on
  if cache then
    -- copy in cached stuff
    for k, v in pairs (cache) do
      item [k] = v  
    end -- for
  elseif not requested_rooms [guid] then
      SendPkt (string.char (IAC, SB, 102) .. type .. " = \"" .. guid .. "\"" .. string.char (IAC, SE)) 
      -- Note ("Requested ", type, " cache ID: ", guid)
      requested_rooms [guid] = GetInfo (232)  -- don't request twice
  end -- if 
end -- check_room_cache

function check_room_cache_table (tbl, type)

  if tbl then
    -- for an entire table (eg. objects, players, npcs, rooms) check all for cached guids
    for i, item in ipairs (tbl) do
      check_room_cache (item.guid, item, type)
    end -- for
  end -- if
  
end -- check_room_cache_table

function OnPluginInstall ()
  
  win = GetPluginID ()

  WindowCreate (win, 0, 0, 0, 0, 0, 0, 0)
                 
  -- add the font
  WindowFont (win, FONT_ID, FONT_NAME, FONT_SIZE)
  
  -- see how high it is
  font_height = WindowFontInfo (win, FONT_ID, 1)  -- height

  -- find where window was last time
  windowinfo = movewindow.install (win, 7)
   
  assert (loadstring (GetVariable ("rooms") or "")) ()
  
  build_room_info ()
  
end -- OnPluginInstall

function OnPluginEnable ()
  WindowShow (win, true)
end -- OnPluginDisable

function OnPluginDisable ()
  WindowShow (win, false)
end -- OnPluginDisable

-- hide window on removal
function OnPluginClose ()
  WindowShow (win,  false)  -- hide it
end -- OnPluginClose

function OnPluginSaveState ()
  movewindow.save_state (win)
  SetVariable ("rooms", "rooms = " .. serialize.save_simple (rooms))
end -- OnPluginSaveState

function mouseup_room (flags, hotspot_id)
  local guid = hotspot_id

  if bit.band (flags, 0x20) == 0 then
    if rooms [guid].shop then
      Execute "list"  -- this is kinda silly, we have to be *in* the room
    end -- if
    
    return
  end -- if not RH click
  
  -- here for RH click
  
  local sw = speedwalks [guid]
  if not sw then
    return
  end -- not found
  
  -- build speedwalk string (collect identical directions)
  local tspeed = {}
  for _, dir in ipairs (sw) do
    local n = #tspeed
    if n == 0 then
      table.insert (tspeed, { dir = dir, count = 1 })
    else
      if tspeed [n].dir == dir then
        tspeed [n].count = tspeed [n].count + 1
      else
        table.insert (tspeed, { dir = dir, count = 1 })
      end -- if different direction
    end -- if
  end -- for
 
  if #tspeed == 0 then
    return
  end -- nowhere to go (current room?)
  
  -- now build string like: 2n3e4(sw)
  local s = "#"  -- speedwalk prefix
  
  for _, dir in ipairs (tspeed) do
    if dir.count > 1 then
      s = s .. dir.count
    end -- if
    if #dir.dir == 1 then
      s = s .. dir.dir
    else
      s = s .. "(" .. dir.dir .. ")"
    end -- if
  end -- if
  
  -- get client to do it  
  Execute (s)
  
end -- mouseup_player

function build_room_info ()
  
  HALF_ROOM   = ROOM_SIZE / 2
  HALF_WAY    = DISTANCE_TO_NEXT_ROOM / 2
  THIRD_WAY   = DISTANCE_TO_NEXT_ROOM / 3
  
  -- how to draw a line from this room to the next one (relative to the center of the room)
  connectors = {
    n =  { x1 = 0,            y1 = - HALF_ROOM, x2 = 0,                                    y2 = - HALF_ROOM - DISTANCE_TO_NEXT_ROOM, at = { 0, -1 } }, 
    s =  { x1 = 0,            y1 =   HALF_ROOM, x2 = 0,                                    y2 =   HALF_ROOM + DISTANCE_TO_NEXT_ROOM, at = { 0,  1 } }, 
    e =  { x1 =   HALF_ROOM,  y1 = 0,           x2 =   HALF_ROOM + DISTANCE_TO_NEXT_ROOM,  y2 = 0,                                   at = {  1,  0 }}, 
    w =  { x1 = - HALF_ROOM,  y1 = 0,           x2 = - HALF_ROOM - DISTANCE_TO_NEXT_ROOM,  y2 = 0,                                   at = { -1,  0 }}, 
  
    ne = { x1 =   HALF_ROOM,  y1 = - HALF_ROOM, x2 =   HALF_ROOM + DISTANCE_TO_NEXT_ROOM , y2 = - HALF_ROOM - DISTANCE_TO_NEXT_ROOM, at = { 1, -1 } }, 
    se = { x1 =   HALF_ROOM,  y1 =   HALF_ROOM, x2 =   HALF_ROOM + DISTANCE_TO_NEXT_ROOM , y2 =   HALF_ROOM + DISTANCE_TO_NEXT_ROOM, at = { 1,  1 } }, 
    nw = { x1 = - HALF_ROOM,  y1 = - HALF_ROOM, x2 = - HALF_ROOM - DISTANCE_TO_NEXT_ROOM , y2 = - HALF_ROOM - DISTANCE_TO_NEXT_ROOM, at = {-1, -1 } }, 
    sw = { x1 = - HALF_ROOM,  y1 =   HALF_ROOM, x2 = - HALF_ROOM - DISTANCE_TO_NEXT_ROOM , y2 =   HALF_ROOM + DISTANCE_TO_NEXT_ROOM, at = {-1,  1 } }, 
  
    } -- end connectors
    
  -- how to draw a stub line
  half_connectors = {
    n =  { x1 = 0,            y1 = - HALF_ROOM, x2 = 0,                        y2 = - HALF_ROOM - THIRD_WAY, at = { 0, -1 } }, 
    s =  { x1 = 0,            y1 =   HALF_ROOM, x2 = 0,                        y2 =   HALF_ROOM + THIRD_WAY, at = { 0,  1 } }, 
    e =  { x1 =   HALF_ROOM,  y1 = 0,           x2 =   HALF_ROOM + THIRD_WAY,  y2 = 0,                       at = {  1,  0 }}, 
    w =  { x1 = - HALF_ROOM,  y1 = 0,           x2 = - HALF_ROOM - THIRD_WAY,  y2 = 0,                       at = { -1,  0 }}, 
  
    ne = { x1 =   HALF_ROOM,  y1 = - HALF_ROOM, x2 =   HALF_ROOM + THIRD_WAY , y2 = - HALF_ROOM - THIRD_WAY, at = { 1, -1 } }, 
    se = { x1 =   HALF_ROOM,  y1 =   HALF_ROOM, x2 =   HALF_ROOM + THIRD_WAY , y2 =   HALF_ROOM + THIRD_WAY, at = { 1,  1 } }, 
    nw = { x1 = - HALF_ROOM,  y1 = - HALF_ROOM, x2 = - HALF_ROOM - THIRD_WAY , y2 = - HALF_ROOM - THIRD_WAY, at = {-1, -1 } }, 
    sw = { x1 =   HALF_ROOM,  y1 = - HALF_ROOM, x2 =   HALF_ROOM + THIRD_WAY , y2 = - HALF_ROOM - THIRD_WAY, at = {-1,  1 } }, 
  
    } -- end half_connectors
  
  -- how to draw one-way arrows (relative to the center of the room)
  arrows = {
     n =  { - 2, - HALF_ROOM - 2,  2, - HALF_ROOM - 2,  0, - HALF_ROOM - 6 },
     s =  { - 2,   HALF_ROOM + 2,  2,   HALF_ROOM + 2,  0,   HALF_ROOM + 6  },
     e =  {   HALF_ROOM + 2, -2,   HALF_ROOM + 2, 2,   HALF_ROOM + 6, 0 },
     w =  { - HALF_ROOM - 2, -2, - HALF_ROOM - 2, 2, - HALF_ROOM - 6, 0 },
    
     ne = {   HALF_ROOM + 3,  - HALF_ROOM,  HALF_ROOM + 3, - HALF_ROOM - 3,  HALF_ROOM, - HALF_ROOM - 3 },
     se = {   HALF_ROOM + 3,    HALF_ROOM,  HALF_ROOM + 3,   HALF_ROOM + 3,  HALF_ROOM,   HALF_ROOM + 3 },
     nw = { - HALF_ROOM - 3,  - HALF_ROOM,  - HALF_ROOM - 3, - HALF_ROOM - 3,  - HALF_ROOM, - HALF_ROOM - 3 },
     sw = { - HALF_ROOM - 3,    HALF_ROOM,  - HALF_ROOM - 3,   HALF_ROOM + 3,  - HALF_ROOM,   HALF_ROOM + 3},
  
    } -- end of arrows

end -- build_room_info

-- for calculating one-way paths
inverse_direction = {
  n = "s",
  s = "n",
  e = "w",
  w = "e",
  u = "d",
  d = "u",
  ne = "sw",
  sw = "ne",
  nw = "se",
  se = "nw",
  }  -- end of inverse_direction

-- how to colour stuff
terrain_colours = {
   inside = "wheat",
   city = "wheat",
   field = "green",
   forest = "green",
   hills = "green",
   mountain = "green",
   water_swim = "blue",
   water_noswim = "blue",
   underwater = "darkblue",
   air = "lemonchiffon",
   desert = "lightgoldenrodyellow",
   dunno = "green",
   oceanfloor = "green",
   underground = "green",
   lava = "red",
   swamp = "green",
}  -- end of  terrain_colours
  
function make_particle (guid, path, x, y)
  particle_count = particle_count + 1
  local path = path or {}
  return {guid=guid, path=path, x = x, y = y}
end

function draw_room (guid, path, x, y)

  local coords = string.format ("%i,%i", x, y)

  if drawn [guid] then
    return
  end -- done this one
  
  -- don't draw the same room more than once
  drawn [guid] = { coords = coords, path = path }
  
  local room = rooms [guid]
  
  -- can't if we know nothing about it
  if not room then
    return
  end -- not in cache
  
  local left, top, right, bottom = x - HALF_ROOM, y - HALF_ROOM, x + HALF_ROOM, y + HALF_ROOM
  
  -- forget it if off screen
  if x < HALF_ROOM or y < HALF_ROOM or 
     x > WINDOW_WIDTH - HALF_ROOM or y > WINDOW_HEIGHT - HALF_ROOM then
     return
  end -- if
  
  -- exits
  
  local texits = {}
  
  for name, exit_guid in pairs (room.exits) do
    table.insert (texits, name)
    local exit_info = connectors [name]
    local stub_exit_info = half_connectors [name]
    local exit_line_colour = EXIT_COLOUR
    local arrow = arrows [name]
    
    -- draw up in the ne/nw position if not already an exit there at this level
    if name == "u" then
      if not room.exits.nw then
        exit_info = connectors.nw
        stub_exit_info = half_connectors.nw
        arrow = arrows.nw
        exit_line_colour = EXIT_COLOUR_UP_DOWN
      elseif not room.exits.ne then
        exit_info = connectors.ne
        stub_exit_info = half_connectors.ne
        arrow = arrows.ne
        exit_line_colour = EXIT_COLOUR_UP_DOWN
      end -- if
    elseif name == "d" then
      if not room.exits.se then
        exit_info = connectors.se
        stub_exit_info = half_connectors.se
        arrow = arrows.se
        exit_line_colour = EXIT_COLOUR_UP_DOWN
      elseif not room.exits.sw then
        exit_info = connectors.sw
        stub_exit_info = half_connectors.sw
        arrow = arrows.sw
        exit_line_colour = EXIT_COLOUR_UP_DOWN
      end -- if
    end -- if down
        
    
    if exit_info then
      local linetype = 0 -- unbroken
      if not rooms [exit_guid] then
        linetype = 2 -- dots
      end -- if
      
      local next_x = x + exit_info.at [1] * (ROOM_SIZE + DISTANCE_TO_NEXT_ROOM)
      local next_y = y + exit_info.at [2] * (ROOM_SIZE + DISTANCE_TO_NEXT_ROOM)
      
      local next_coords = string.format ("%i,%i", next_x, next_y)
      
--      print ("Drawing", guid, "exit", name, "exit_guid", exit_guid)
      
      --[[
      -- debug yadda yadda
      if guid == "10300" then
        print ("exit=", name, "exit_guid=", exit_guid, "next_coords=", next_coords)
        print ("drawn [exit_guid]=", drawn [exit_guid])
        if drawn [exit_guid] then
          print ("drawn [exit_guid].coords=", drawn [exit_guid].coords)
        end -- if
      end -- if 
      --]]
      
      -- if another room (not where this one leads to) is already there, only draw "stub" lines
      if drawn_coords [next_coords] and 
        (not drawn [exit_guid] or drawn [exit_guid].coords ~= next_coords) then
        exit_info = stub_exit_info
      else
        -- remember to draw room next iteration
        local new_path = copytable.deep (path)
        table.insert (new_path, name)
        table.insert (particles, make_particle (exit_guid, new_path, next_x, next_y))
        drawn_coords [next_coords] = true
      end -- if drawn on this spot

      WindowLine (win, x + exit_info.x1, y + exit_info.y1, x + exit_info.x2, y + exit_info.y2, exit_line_colour, linetype, 1)
      
      -- one-way exit?
      
      if rooms [exit_guid] then
        local dest = rooms [exit_guid]
        -- if inverse direction doesn't point back to us, this is one-way
        if dest.exits [inverse_direction [name]] ~= guid then
        
          -- turn points into string, relative to where the room is
          local points = string.format ("%i,%i,%i,%i,%i,%i", 
              x + arrow [1],
              y + arrow [2],
              x + arrow [3],
              y + arrow [4],
              x + arrow [5],
              y + arrow [6])
              
          -- draw arrow
          WindowPolygon(win, points, exit_line_colour, 0, 1, exit_line_colour, 0, true, true)
        
        end -- one way
      
      end -- if we know of the room where it does
      
    end -- if we know what to do with this direction
  end -- for each exit

  -- special room colours
  if room.shop then
    WindowRectOp (win, 2, left, top, right, bottom, SHOP_FILL_COLOUR)
  elseif room.train then
    WindowRectOp (win, 2, left, top, right, bottom, TRAINER_FILL_COLOUR)
  elseif room.repair then
    WindowRectOp (win, 2, left, top, right, bottom, BLACKSMITH_FILL_COLOUR)
  elseif room.healer then
    WindowRectOp (win, 2, left, top, right, bottom, HEALER_FILL_COLOUR)
  else
    -- use terrain colour
    if room.terrain and terrain_colours [room.terrain] then
      WindowRectOp (win, 2, left, top, right, bottom, ColourNameToRGB (terrain_colours [room.terrain]))
    end -- if
  end -- if 

  local bordercolour = ROOM_COLOUR
  if guid == current_room then
    bordercolour = OUR_ROOM_COLOUR
  end -- if current room
    
  -- draw current room (last, so it goes on top)
  WindowRectOp (win, 1, left, top, right, bottom, bordercolour)

  -- thicker border for our room
  if guid == current_room then
    WindowRectOp (win, 1, left + 1, top + 1, right - 1, bottom - 1, bordercolour)
  end -- if current room
  
  -- show up and down in case we can't get a line in
  
  if room.exits.u then
    WindowLine (win, left, top, left + ROOM_SIZE, top, EXIT_COLOUR_UP_DOWN, 0, 1)
  end -- if
  if room.exits.d then
    WindowLine (win, left, bottom, left + ROOM_SIZE, bottom, EXIT_COLOUR_UP_DOWN, 0, 1)
  end -- if
  
  speedwalks [guid] = path  -- so we know how to get here
  
  WindowAddHotspot(win, guid,  
                 left, top, right, bottom,   -- rectangle
                 "",  -- mouseover
                 "",  -- cancelmouseover
                 "",  -- mousedown
                 "",  -- cancelmousedown
                 "mouseup_room",  -- mouseup
                 string.format ("%s\tExits=%s",    -- \nGuid=%s\nSteps=%i\nPath to=%s
                        room.name, 
                        table.concat (texits, ", ") 
                        -- guid, 
                        -- depth,
                        -- table.concat (path, ",")
                        ),  -- tooltip text
                 1, 0)  -- hand cursor
                   
end -- draw_room


function draw_everything (move)
  
  local start_time = GetInfo (232)
  
  WindowCreate (win, 
                 windowinfo.window_left, 
                 windowinfo.window_top, 
                 WINDOW_WIDTH, WINDOW_HEIGHT,  
                 windowinfo.window_mode,   -- top right
                 windowinfo.window_flags,
                 0) 

  -- let them move it around                 
  movewindow.add_drag_handler (win, 0, 0, 0, 0)
    
  
  -- fill entire box to clear it
  WindowRectOp (win, 2, 0, 0, 0, 0, BACKGROUND_COLOUR)  -- fill entire box
   
  -- Edge around box rectangle
  WindowCircleOp (win, 3, 0, 0, 0, 0, ColourNameToRGB "darkgray", 0, 2, 0, 1)

  if move.blind then
    WindowText (win, FONT_ID, blind_message, 5, 5, 0, 0, ColourNameToRGB "darkred", true)
  elseif move.dark then
    WindowText (win, FONT_ID, dark_message, 5, 5, 0, 0, ColourNameToRGB "darkgreen", true)
  else  
    vertical = 5  -- pixel to start at
   -- WindowText (win, FONT_ID, move.guid, 5, vertical, 0, 0, ColourNameToRGB "saddlebrown", true)
    vertical = vertical + font_height
    if room.name then
   --   WindowText (win, FONT_ID, room.name, 5, vertical, 0, 0, ColourNameToRGB "saddlebrown", true)
    end -- if
    -- initial room in middle
    drawn, drawn_coords, particles, speedwalks = {}, {}, {}, {}
    depth = 0
    particle_count = 0
    current_room = move.guid
    -- insert initial room
    table.insert (particles, make_particle (move.guid, {}, WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2))

    while #particles > 0 and depth < MAX_DEPTH do
      local old_generation = particles
      particles = {}  -- new generation
      for i, part in ipairs (old_generation) do 
        draw_room (part.guid, part.path, part.x, part.y)
      end -- for each existing particle
      depth = depth + 1
    end -- while all particles
    
  end -- if 
  
  -- 3D box
  WindowCircleOp (win, 3, 0, 0, 0, 0, 0x505050, 0, 3, 0, 1)   -- dark grey border (3 pixels)
  WindowCircleOp (win, 3, 1, 1, -1, -1, 0x7C7C7C, 0, 1, 0, 1)  -- lighter inner border
  WindowCircleOp (win, 3, 2, 2, -2, -2, 0, 0, 1, 0, 1)  -- black inside that
  WindowLine (win, 1, 1, WINDOW_WIDTH - 1, 1, 0xC2C2C2, 0, 1)  -- light top edge
  WindowLine (win, 1, 1, 1, WINDOW_HEIGHT - 1, 0xC2C2C2, 0, 1)  -- light left edge (for 3D look)
    
  -- make sure window visible
  WindowShow (win, true)

  last_drawn = copytable.deep (move)
  
  local end_time = GetInfo (232)

  -- print (string.format ("Time to draw= %0.6f", end_time - start_time))

end -- draw_everything

-- here when location changes

function OnPluginTelnetOption (option)

  local t = {}  -- incoming server variables will go into table t
  setfenv (assert (loadstring (option)), t) () -- compile and load into t
  
  -- cache incoming object information
  if t.room_info then
    for k, v in pairs (t.room_info) do
      local time_elapsed = GetInfo (232) - (requested_rooms [k] or GetInfo (232))
      local dsc = v.name or "<not there>"
      -- Note (string.format ("RECEIVED room ID: %s in %.2f seconds (%s).", k, time_elapsed, dsc))
      rooms [k] = v or nil
      requested_rooms [k] = nil
      -- tprint (v)
    end -- for
  end -- if
    
  if t.move then
    redisplay = nil
  else
    -- we couldn't display all last time, and we got some cache info, try again
    if redisplay and t.room_info then
      t.move = redisplay
    else
      return
    end
  end
   
  room = {}  -- current room
  
  check_room_cache_table (t.move.exits,  "room_info")
  check_room_cache (t.move.guid, room, "room_info")
  
  if not rooms [t.move.guid] then
    redisplay = t.move  -- need to redisplay when cache info arrives
    return
  end -- if

  check_room_cache_table (rooms [t.move.guid].exits,  "room_info")
    
  draw_everything (t.move)
 
end -- function OnPluginTelnetOption

]]>
</script>

</muclient>
